#define BASIC_CUBE_SIZE_THREAD_COUNT 8

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Balance
#pragma kernel ChangeDelta
#pragma kernel Movement

RWStructuredBuffer<float> airBuffer;
RWStructuredBuffer<float> oldAirBuffer;
RWStructuredBuffer<float> movementBuffer;
RWStructuredBuffer<float> transferabilityBuffer;
RWStructuredBuffer<int> curDeltaBuffer;

int numNodes;

int width;
int height;
int depth;

int curDeltaChoice;


//3D to 1D
int IndexNum(int _x, int _y, int _z)
{
    //3D position to 1D array index = x + (y * maxX) + (z * maxX * maxY) from http://stackoverflow.com/questions/26162501/how-do-you-flatten-a-3d-array
    int index = _x + (_y * width) + (_z * height * width);
    return index;
}

[numthreads(1,1,1)]
void ChangeDelta()
{
    curDeltaBuffer[0]++;
    [branch]
    if (curDeltaBuffer[0] >= 9)
    {
        curDeltaBuffer[0] = 0;
    }
}

//1 pass balancing with CPU pushing RNG to curDeltaChoice
[numthreads(1,1,1)]
void Balance(uint3 id : SV_DispatchThreadID)
{
    int3 deltas[9] =
    {
        int3(0, 0, 0),
    int3(1, 0, 0),
    int3(2, 0, 0),
    int3(0, 0, 1),
    int3(1, 0, 1),
    int3(2, 0, 1),
    int3(0, 0, 2),
    int3(1, 0, 2),
    int3(2, 0, 2),
    };
    int3 deltasOne[9] =
    {
        int3(1, 1, 1),
    int3(1, 1, 1),
    int3(-2, 1, 1),
    int3(1, 1, 1),
    int3(1, 1, 1),
    int3(-2, 1, 1),
    int3(1, 1, -2),
    int3(1, 1, -2),
    int3(-2, 1, -2),
    };
    int3 deltasTwo[9] =
    {
        int3(2, 2, 2),
    int3(-1, 2, 2),
    int3(-1, 2, 2),
    int3(2, 2, -1),
    int3(-1, 2, -1),
    int3(-1, 2, -1),
    int3(2, 2, -1),
    int3(-1, 2, -1),
    int3(-1, 2, -1),
    };

    //first node and neighbors
    int node0X = (id.x * 3) + deltas[curDeltaBuffer[0]].x;
    int node0Y = (id.y * 3) + deltas[curDeltaBuffer[0]].y;
    int node0Z = (id.z * 3) + deltas[curDeltaBuffer[0]].z;
    int node0 = IndexNum(node0X, node0Y, node0Z);
    int x00 = clamp((node0X - 1), 0, width - 1);
    int x01 = clamp((node0X + 1), 0, width - 1);
    int y00 = clamp((node0Y - 1), 0, height - 1);
    int y01 = clamp((node0Y + 1), 0, height - 1);
    int z00 = clamp((node0Z - 1), 0, depth - 1);
    int z01 = clamp((node0Z + 1), 0, depth - 1);
    int indexes0[6] =
    {
        IndexNum(x00, node0Y, node0Z), //1st neighbor -x
        IndexNum(x01, node0Y, node0Z), //2nd neighbor +x
        IndexNum(node0X, y00, node0Z), //3rd neighbor -y
        IndexNum(node0X, y01, node0Z), //4th neighbor +y
        IndexNum(node0X, node0Y, z00), //5th neighbor -z
        IndexNum(node0X, node0Y, z01) //6th neighbor +z        
    };

    //second node and neighbors
    int node1X = node0X + deltasOne[curDeltaBuffer[0]].x;
    int node1Y = node0Y + deltasOne[curDeltaBuffer[0]].y;
    int node1Z = node0Z + deltasOne[curDeltaBuffer[0]].z;
    int node1 = IndexNum(node1X, node1Y, node1Z);
    int x10 = clamp((node1X - 1), 0, width - 1);
    int x11 = clamp((node1X + 1), 0, width - 1);
    int y10 = clamp((node1Y - 1), 0, height - 1);
    int y11 = clamp((node1Y + 1), 0, height - 1);
    int z10 = clamp((node1Z - 1), 0, depth - 1);
    int z11 = clamp((node1Z + 1), 0, depth - 1);
    int indexes1[6] =
    {
        IndexNum(x10, node1Y, node1Z), //1st neighbor -x
        IndexNum(x11, node1Y, node1Z), //2nd neighbor +x
        IndexNum(node1X, y10, node1Z), //3rd neighbor -y
        IndexNum(node1X, y11, node1Z), //4th neighbor +y
        IndexNum(node1X, node1Y, z10), //5th neighbor -z
        IndexNum(node1X, node1Y, z11) //6th neighbor +z        
    };

    //third node and neighbors
    int node2X = node0X + deltasTwo[curDeltaBuffer[0]].x;
    int node2Y = node0Y + deltasTwo[curDeltaBuffer[0]].y;
    int node2Z = node0Z + deltasTwo[curDeltaBuffer[0]].z;
    int node2 = IndexNum(node2X, node2Y, node2Z);
    int x20 = clamp((node2X - 1), 0, width - 1);
    int x21 = clamp((node2X + 1), 0, width - 1);
    int y20 = clamp((node2Y - 1), 0, height - 1);
    int y21 = clamp((node2Y + 1), 0, height - 1);
    int z20 = clamp((node2Z - 1), 0, depth - 1);
    int z21 = clamp((node2Z + 1), 0, depth - 1);
    int indexes2[6] =
    {
        IndexNum(x20, node2Y, node2Z), //1st neighbor -x
        IndexNum(x21, node2Y, node2Z), //2nd neighbor +x
        IndexNum(node2X, y20, node2Z), //3rd neighbor -y
        IndexNum(node2X, y21, node2Z), //4th neighbor +y
        IndexNum(node2X, node2Y, z20), //5th neighbor -z
        IndexNum(node2X, node2Y, z21) //6th neighbor +z        
    };
    

    oldAirBuffer[node0] = airBuffer[node0];
    oldAirBuffer[node1] = airBuffer[node1];
    oldAirBuffer[node2] = airBuffer[node2];

    //3 nodes balancing with neighbors
    [loop]
    for (int i = 0; i < 6; i++)
    {
        float difference0 = (airBuffer[node0] - airBuffer[indexes0[i]]) * (transferabilityBuffer[node0] * transferabilityBuffer[indexes0[i]]);
        difference0 /= 2;
        GroupMemoryBarrierWithGroupSync();
        airBuffer[node0] -= difference0;
        airBuffer[indexes0[i]] += difference0;
        
        float difference1 = (airBuffer[node1] - airBuffer[indexes1[i]]) * (transferabilityBuffer[node1] * transferabilityBuffer[indexes1[i]]);
        difference1 /= 2;
        GroupMemoryBarrierWithGroupSync();
        airBuffer[node1] -= difference1;
        airBuffer[indexes1[i]] += difference1;
        
        float difference2 = (airBuffer[node2] - airBuffer[indexes2[i]]) * (transferabilityBuffer[node2] * transferabilityBuffer[indexes2[i]]);
        difference2 /= 2;
        GroupMemoryBarrierWithGroupSync();
        airBuffer[node2] -= difference2;
        airBuffer[indexes2[i]] += difference2;
    }
}

[numthreads(1,1,1)]
void Movement(uint3 id : SV_DispatchThreadID)
{
    int3 deltas[9] =
    {
        int3(0, 0, 0),
    int3(1, 0, 0),
    int3(2, 0, 0),
    int3(0, 0, 1),
    int3(1, 0, 1),
    int3(2, 0, 1),
    int3(0, 0, 2),
    int3(1, 0, 2),
    int3(2, 0, 2),
    };
    int3 deltasOne[9] =
    {
        int3(1, 1, 1),
    int3(1, 1, 1),
    int3(-2, 1, 1),
    int3(1, 1, 1),
    int3(1, 1, 1),
    int3(-2, 1, 1),
    int3(1, 1, -2),
    int3(1, 1, -2),
    int3(-2, 1, -2),
    };
    int3 deltasTwo[9] =
    {
        int3(2, 2, 2),
    int3(-1, 2, 2),
    int3(-1, 2, 2),
    int3(2, 2, -1),
    int3(-1, 2, -1),
    int3(-1, 2, -1),
    int3(2, 2, -1),
    int3(-1, 2, -1),
    int3(-1, 2, -1),
    };

    int node = IndexNum((id.x * 3) + deltas[curDeltaBuffer[0]].x, (id.y * 3) + deltas[curDeltaBuffer[0]].y, (id.z * 3) + deltas[curDeltaBuffer[0]].z);
    movementBuffer[node] = airBuffer[node] - oldAirBuffer[node];
}
